"""
This file includes classes that will aid in implementing the board game
checkers with arbitrary board size. There is one main class that handles the
game logic with supporting classes for storing representations of moves and
pieces.


Examples:

1) Creating a board:

    board = CheckersBoard(8)


2) Checking if a given move is feasible:

    board = CheckersBoard(2)

    # For example only, this should be a proper move, ideally one that is
    # generated by CheckersBoard
    move = Move(...)

    validity = board.validate_move(move)


3) Getting valid moves for a piece on the board:

    board = CheckersBoard(2)
    piece = Piece(...)  # For example only, this should be a proper piece

    piece_moves = board.get_piece_moves(piece)


4) Getting all valid moves for a player:

    current_player = PieceColor.BLACK  # for example, could be either
    player_moves = board.get_player_moves(current_player)


5) Checking for a winner:

    game_status = board.get_game_state()

    if game_status == GameStatus.IN_PROGRESS:
        print("Game in progress")
    elif winner == GameStatus.RED_WINS:
        print("Red wins!")
    elif winner == GameStatus.BLACK_WINS:
        print("Black wins!")
    else:
        print("Draw!")
"""

from enum import Enum
from typing import Tuple, List, Dict, Union


# ===============
# aux_utils.py
# ===============
# Type Aliases
# ===============

Position = Tuple[int, int]


# ===============
# ENUMS
# ===============


class PieceColor(Enum):
    """
    An enumeration for the internal representation of a piece's color.
    """

    RED = 'r'
    BLACK = 'b'


# ===============
# DATA CLASSES
# ===============


class GenericPiece:
    """
    Represents a generic piece for a generic board game.
    """

    def __init__(self, pos: Position, color: PieceColor) -> None:
        """
        Constructor for a piece.

        Args:
            pos (Tuple[int, int]): the position of the piece on the board
            color (PieceColor): The color of the piece
        """
        self._x: int
        self._y: int

        self.set_position(pos)  # initialize piece position
        self._color = color  # the piece's color

    def get_position(self) -> Position:
        """
        Getter function that returns the piece's position.

        Args:
            None

        Returns:
            Position of the piece
        """
        raise NotImplementedError

    def set_position(self, new_pos: Position) -> None:
        """
        Setter for the piece's position. If an invalid position is provided,
        ValueError will be raised.

        Args:
            new_pos (Position): the new position of the piece

        Returns:
            None

        Raises:
            ValueError if invalid position is provided.
        """
        raise NotImplementedError

    def set_captured(self) -> None:
        """
        Sets the piece's to captured. This cannot be undone, please make sure
        you know what you're doing.

        Args:
            None

        Returns:
            None
        """
        raise NotImplementedError

    def is_captured(self) -> bool:
        """
        Returns whether the piece is captured.

        Args:
            None

        Returns:
            True if captured otherwise False
        """
        raise NotImplementedError

    def get_color(self) -> PieceColor:
        """
        Getter function that returns the piece's color.

        Args:
            None

        Returns:
            The color of the piece
        """
        raise NotImplementedError

    def __str__(self) -> str:
        """
        Returns a string representation of the piece. Returns the value of the
        color of the piece (PieceColor.value).

        For example:
        Red: 'r'
        Black: 'b'

        Args:
            None

        Returns:
            str: String representation of the piece
        """
        raise NotImplementedError

    def __repr__(self) -> str:
        """
        Returns the representation of this piece. Meant for debugging.

        Args:
            None

        Returns:
            str: Debug representation of the piece
        """
        raise NotImplementedError

    def __eq__(self, other: object) -> bool:
        """
        Implements the equality operator for type GenericPiece

        Args:
           other (object): the object to be compared to

        Returns:
            bool: True if equal, False if not
        """
        raise NotImplementedError


class Piece(GenericPiece):
    """
    Represents a checkers piece.
    """

    def __init__(self, pos: Position, color: PieceColor,
                 king: bool = False) -> None:
        """
        Constructor for a piece.

        Args:
            pos (Tuple[int, int]): the position of the piece on the board
            color (PieceColor): The color of the piece
            king (bool): Is this a king? (Intended for debug scenarios)
        """
        super().__init__(pos, color)

        self._king = king  # is this piece a king?

    def is_king(self) -> bool:
        """
        Getter function that returns whether this piece is a king.

        Args:
            None

        Returns:
            True if this is a king otherwise False
        """
        raise NotImplementedError

    def to_king(self) -> None:
        """
        Update the piece to a king (aka 'kinging').

        Args:
            None

        Returns:
            None
        """
        raise NotImplementedError

    def unking(self) -> None:
        """
        Unset the king state of the piece.

        Args:
            None

        Returns:
            None
        """
        raise NotImplementedError

    def __str__(self) -> str:
        """
        Returns a string representation of the piece. Returns one character
        which is uppercase if king otherwise lowercase.

        Red: 'r' or 'R'
        Black: 'b' or 'B'

        Args:
            None

        Returns:
            str: String representation of the piece
        """
        raise NotImplementedError

    def __repr__(self) -> str:
        """
        Returns the representation of this piece. Meant for debugging.

        Args:
            None

        Returns:
            str: Debug representation of the piece
        """
        raise NotImplementedError

    def __eq__(self, other: object) -> bool:
        """
        Implements the equality operator for type Piece

        Args:
           other (object): the object to be compared to

        Returns:
            bool: True if equal, False if not
        """
        raise NotImplementedError


class Move:
    """
    Represents a move that can be done by a piece or a resignation/draw offer.
    """

    def __init__(self, piece: Union[Piece, None], new_pos: Position,
                 curr_pos: Union[Position, None] = None) -> None:
        """
        Creates a new move object.

        Stores the piece to be moved, the new position after the move, and the
        current position of the piece.

        The current position will be either from:
         1) curr_pos (if provided)
         2) The piece itself (if provided)
         3) (-1, -1), but will raise an error when getting (see method below)

        Args:
            piece (Piece or None): the piece this move belongs to
            new_pos (Position): the new position after the move
            curr_pos (Position or None): optional parameter for the current
                                         position of the piece
        """
        self._piece = piece  # the piece to be moved

        # The new position. If it is (-1, -1) then it is not a "move" per se
        self._new_x, self._new_y = new_pos

        # Handle current piece location as specified in docstring
        if curr_pos:
            self._curr_x, self._curr_y = curr_pos
        elif piece:
            self._curr_x, self._curr_y = piece.get_position()
        else:
            self._curr_x, self._curr_y = (-1, -1)

    def get_new_position(self, _strict: bool = True) -> Position:
        """
        Getter for the new position of the piece after the move. Raises
        RuntimeError if the new position stored is not valid (greater than
        (0, 0)).

        Args:
            _strict (bool): private argument to disable position validity check

        Returns:
            Position of the piece after the move

        Raises:
            RuntimeError: if the new position is not greater than (0, 0)
        """
        raise NotImplementedError

    def get_piece(self) -> Piece:
        """
        Getter for the piece that will move. If there is no piece associated
        with this move then a RuntimeError will be raised.

        Args:
            None

        Returns:
            Piece to be moved

        Raises:
            RuntimeError: if this move has no piece
        """
        raise NotImplementedError

    def is_kinging(self, board_length: int) -> bool:
        """
        Method that determines whether this move will result in the kinging of
        this piece. Implemented exclusively for the bot, may not work if not
        used by the bot.

        Args:
            board_length (int): the length of the board

        Returns:
            bool: True if this move will result in a kinging else False
        """
        raise NotImplementedError

    def get_current_position(self, _strict: bool = True) -> Position:
        """
        Getter for the current position of the piece that will be moved. If
        there is no position stored or if the position is invalid (captured)
        then this method will raise RuntimeError.

        Does not update the current position if the current position has
        changed in the piece itself.

        Args:
            _strict (bool): private argument to disable position validity check

        Returns:
            Position: current position of the piece

        Raises:
            RuntimeError: if the position is invalid
        """
        raise NotImplementedError

    def __eq__(self, other: object) -> bool:
        """
        Implements the equality operator for type Move

        Args:
           other (object): the object to be compared to

        Returns:
            bool: True if equal, False if not
        """
        raise NotImplementedError

    def __str__(self) -> str:
        """
        Returns a string representation of the move. Raises RuntimeError if no
        Piece is associated with this move or if the new position is invalid.

        Args:
            None

        Returns:
            str: String representation of the move

        Raises:
            RuntimeError: if this move has no piece
            RuntimeError: if the new position is not greater than (0, 0)
        """
        raise NotImplementedError

    def __repr__(self) -> str:
        """
        Returns the representation of the move. Intended for debugging.

        Args:
            None

        Returns:
            str: representation of the move
        """
        raise NotImplementedError


class Jump(Move):
    """
    Represents a jump that can done by a piece. Includes the opponent's piece
    that will be captured if the jump is completed.
    """

    def __init__(self,
                 piece: Piece,
                 new_pos: Position,
                 opponent_piece: Piece,
                 curr_pos: Union[Position, None] = None) -> None:
        """
        Creates a new jump object.

        Args:
            piece (Piece): the piece this move belongs to
            new_pos (Position): the new position after the jump
            opponent_piece (Piece): the piece that will be captured
        """
        super().__init__(piece, new_pos, curr_pos)

        # The Piece that would be captured during the move
        self._opponent_piece = opponent_piece

    def get_captured_piece(self) -> Piece:
        """
        Getter method that returns the piece that would be captured after the
        jump.

        Args:
            None

        Returns:
            The Piece that would be captured during the move
        """
        raise NotImplementedError

    def __eq__(self, other: object) -> bool:
        """
        Implements the equality operator for type Jump

        Args:
            other (object): the object to be compared to

        Returns:
            bool: True if equal, False if not
        """
        raise NotImplementedError

    def __str__(self) -> str:
        """
        Returns a string representation of the move

        Args:
            None

        Returns:
            str: String representation of the move
        """
        raise NotImplementedError

    def __repr__(self) -> str:
        """
        Returns the representation of the jump. Intended for debugging.

        Args:
            None

        Returns:
            str: representation of the jump
        """
        raise NotImplementedError


class Resignation(Move):
    """
    Represents a resignation by one player. Upon resignation, an instance of
    this class should be created by the GUI/TUI and be "played".
    """

    def __init__(self, color: PieceColor) -> None:
        """
        Create a new resignation object. The color of the player that is
        resigning must be provided.

        Args:
            color (PieceColor): the color of the player that is resigning
        """
        super().__init__(None, (-1, -1))

        self._resigning_color = color

    def get_new_position(self, _strict: bool = True) -> Position:
        """
        Overrides the parent Piece getter function. Raises TypeError.

        Args:
            _strict (bool): unused as this method only errors

        Returns:
            None

        Raises:
            TypeError, as this class does not contain valid values to get
        """
        raise NotImplementedError

    def get_piece(self) -> Piece:
        """
        Overrides the parent Piece getter function. Raises TypeError.

        Args:
            None

        Returns:
            None

        Raises:
            TypeError, as this class does not contain valid values to get
        """
        raise NotImplementedError

    def get_current_position(self, _strict: bool = True) -> None:
        """
        Overrides the parent Piece getter function. Raises TypeError.

        Args:
            _strict (bool): unused argument as this only errors

        Returns:
            None

        Raises:
            TypeError, as this class does not contain valid values to get
        """
        raise NotImplementedError

    def get_resigning_color(self) -> PieceColor:
        """
        Getter for the color of the player that is resigning.

        Args:
            None

        Returns:
            PieceColor: the color of the player that is resigning.
        """
        raise NotImplementedError

    def __eq__(self, other: object) -> bool:
        """
        Implements the equality operator for type Resignation

        Args:
            other (object): the object to be compared to

        Returns:
            bool: True if equal, False if not
        """
        raise NotImplementedError

    def __str__(self) -> str:
        """
        Returns a string representation of the resignation

        Args:
            None

        Returns:
            str: String representation of the move
        """
        raise NotImplementedError

    def __repr__(self) -> str:
        """
        Returns the representation of the resignation. Intended for debugging.

        Args:
            None

        Returns:
            str: representation of the resignation
        """
        raise NotImplementedError


class DrawOffer(Move):
    """
    Represents an offer/acceptance of a draw.

    When offering a draw, the GUI/TUI must create an instance of this class and
    "play" it along with another "regular" move (move/jump).

    When a draw is offered, the player will receive it when getting all valid
    moves for that player. The color stored in that DrawOffer will be the
    recipient player's color, NOT the offering player's color.

    To accept a draw, the GUI/TUI must "play" the draw request provided when
    getting the player's move. To reject, play any other move.
    """

    def __init__(self, offering_color: PieceColor) -> None:
        """
        Create a new draw offer. The offering player's color is stored.

        Args:
            offering_color (PieceColor): the color of player that is offering
                                         the draw
        """
        super().__init__(None, (-1, -1))

        # The color of the player offering the draw
        self._offering_color = offering_color

    def get_new_position(self, _strict: bool = True) -> Position:
        """
        Overrides the parent Piece getter function. Raises TypeError.

        Args:
            _strict (bool): unused argument as this only errors

        Returns:
            None

        Raises:
            TypeError, as this class does not contain valid values to get
        """
        raise NotImplementedError

    def get_piece(self) -> Piece:
        """
        Overrides the parent Piece getter function. Raises TypeError.

        Args:
            None

        Returns:
            None

        Raises:
            TypeError, as this class does not contain valid values to get
        """
        raise NotImplementedError

    def get_current_position(self, _strict: bool = True) -> None:
        """
        Overrides the parent Piece getter function. Raises TypeError.

        Args:
            _strict (bool): unused argument as this only errors

        Returns:
            None

        Raises:
            TypeError, as this class does not contain valid values to get
        """
        raise NotImplementedError

    def get_offering_color(self) -> PieceColor:
        """
        Getter to return the color that is offering the draw

        Args:
            None

        Returns:
            PieceColor of the player offering the draw
        """
        raise NotImplementedError

    def __eq__(self, other: object) -> bool:
        """
        Implements the equality operator for type DrawOffer

        Args:
            other (object): the object to be compared to

        Returns:
            bool: True if equal, False if not
        """
        raise NotImplementedError

    def __str__(self) -> str:
        """
        Returns a string representation of the draw offer

        Args:
            None

        Returns:
            str: String representation of the move
        """
        raise NotImplementedError

    def __repr__(self) -> str:
        """
        Returns the representation of the offer. Intended for debugging.

        Args:
            None

        Returns:
            str: representation of the offer
        """
        raise NotImplementedError


# ===============
# board.py
# ===============
# Board Class
# ===============


class Board:
    """
    This class represents a generic game board with support for two players.

    Positions on the board are represented from (0, 0) in the top left corner
    increasing down and to the right.
    """

    def __init__(self, height: int,
                 width: Union[int, None] = None,
                 colors: Tuple[PieceColor, ...] = (PieceColor.BLACK,
                                                   PieceColor.RED)) -> None:
        """
        Creates a new game board.

        Args:
            height (int): the height of the board or other size metric. The 
                implementing subclass will ultimately determine the meaning and
                usage of this argument.
            width (int or None): the width of the board. The implementing
                subclass will ultimately determine the meaning and usage of this
                argument.
            colors (Tuple of PieceColor): the colors of the pieces on the board
        """
        # Dictionary of all uncaptured pieces and their positions
        self._pieces: Dict[Position, Piece] = self._gen_pieces(height, width)

        # Each player's pieces that have been captured by the other player
        self._captured: Dict[PieceColor, List[Piece]] = {
            color: [] for color in colors
        }

        # Implementing classes MUST set these attributes to integers
        self._height = height
        self._width = width if (width is not None) else height

    def get_board_pieces(self) -> List[Piece]:
        """
        Getter method that returns a list of all pieces on the board.

        Args:
            None

        Returns:
            List[Piece]: list of pieces on the board
        """
        raise NotImplementedError

    def get_captured_pieces(self) -> List[Piece]:
        """
        Getter method that returns a list of all captured pieces.

        Args:
            None

        Returns:
            List[Piece]: list of all captured pieces
        """
        raise NotImplementedError

    def get_color_captured_pieces(self, color: PieceColor) -> List[Piece]:
        """
        Getter method that returns a list of captured pieces for a given player
        color.

        This method returns for a color, the pieces of that color that were
        captured by the other player. It returns a list of pieces of the same
        color that was provided.

        Args:
            color (PieceColor): the player being queried

        Returns:
            List[Piece]: list of captured pieces for a color
        """
        raise NotImplementedError

    def get_color_avail_pieces(self, color: PieceColor) -> List[Piece]:
        """
        Getter that returns a list of pieces still on the board for a given
        player color.

        Args:
            color (PieceColor): the player being queried

        Returns:
            List[Piece]: list of pieces still on the board for that color
        """
        raise NotImplementedError

    def get_board_height(self) -> int:
        """
        Getter method for the height of the board

        Args:
            None

        Returns:
            int: the height of the board
        """
        raise NotImplementedError

    def get_board_width(self) -> int:
        """
        Getter method for the width of the board

        Args:
            None

        Returns:
            int: the width of the board
        """
        raise NotImplementedError

    def complete_move(self, move: Move) -> List[Move]:
        """
        Method for completing a move. First validates the move using
        self.validate_move() which validates whether the move is even feasible,
        or, if overloaded by a subclass, custom validation.

        Args:
            move (Move): the move to make

        Returns:
            List[Move]: An empty list of follow-up moves. Implementing 
                subclasses ultimately determine meaning and usage of this 
                return. 

        Raises:
            ValueError: If the move is not valid.
        """
        raise NotImplementedError

    def undo_move(self, move: Move) -> None:
        """
        Abstract method for undoing a given move.

        Args:
            move (Move): the move that is to be undone

        Returns:
            None
        """
        raise NotImplementedError

    def validate_move(self, move: Move) -> bool:
        """
        Validates a potential move. Only checks if the piece exists, is on the
        board, and if the new position is valid and not taken by another piece.

        Args:
            move (Move): the move to validate

        Returns:
            bool: True if the move is valid otherwise False
        """
        raise NotImplementedError

    def _validate_position(self, pos: Position) -> bool:
        """
        Helper method for checking if a provided position is on the board.

        Args:
            pos (Position): the position to validate

        Returns:
            bool: True if valid otherwise false
        """
        raise NotImplementedError

    def _gen_pieces(self, height: Union[int, None] = None,
                    width: Union[int, None] = None) -> Dict[Position, Piece]:
        """
        Abstract method for the generation of the pieces. Children of this class
        must implement this method according to the rules of their game.

        Args:
            height (int or None): the height of the board. The implementing
                subclass will ultimately determine the meaning and usage of this
                argument.
            width (int or None): the width of the board. The implementing
                subclass will ultimately determine the meaning and usage of this
                argument.

        Returns:
            Dict[Position, Piece]: Dictionary containing piece locations and
                                   pieces for both players
        """
        raise NotImplementedError

    def __str__(self) -> str:
        """
        Returns a string representation of the board only. Assumes that the
        board space coloring is checkers-like.

        Args:
            None

        Returns:
            str: String representation of the board
        """
        raise NotImplementedError

    def __repr__(self) -> str:
        """
        Returns the representation of the board. Intended for debugging.
        Includes captured pieces.

        Assumes board space coloring is checkers-like.

        Args:
            None

        Returns:
            str: representation of the board
        """
        raise NotImplementedError


# ===============
# checkers.py
# ===============
# ENUMS
# ===============


class GameStatus(Enum):
    """
    An enumeration for the current game state.
    """
    # Same as PieceColor values
    RED_WINS = 0
    BLACK_WINS = 1

    # Other statuses
    IN_PROGRESS = 100
    DRAW = 101


# ====================
# Checkers Game Class
# ====================


class CheckersBoard(Board):
    """
    Represents a checkers game. Provides methods for obtaining valid moves,
    validating moves, and acting upon moves according to the rules of checkers.
    Stores the board state along with all pieces, captured or uncaptured.

    The board square grid begins with (0, 0), a light square, at the "top
    left", where the top rows will contain the black pieces and the bottom rows
    containing the red pieces.
    """

    def __init__(self, rows_per_player: int, caching: bool = True) -> None:
        """
        Creates a new Checkers game.

        Args:
            rows_per_player (int): the number of rows of pieces per player
            caching (bool): whether to cache players' moves or not
        """
        super().__init__(rows_per_player)

        # ==================================
        # CheckersBoard Specific Attributes
        # ==================================

        self._board_size = 2 * (rows_per_player + 1)
        self._rows_per_player = rows_per_player

        # Override parent definition of width and height
        self._width = self._board_size
        self._height = self._board_size

        # Represents an outstanding draw offer and acceptance
        self._draw_offer: Dict[PieceColor, bool] = {
            PieceColor.BLACK: False,
            PieceColor.RED: False
        }

        self._caching = caching  # is caching enbled?
        # Cache of the player's available moves XOR jumps. If the cache is None,
        # then the cache has expired/has not been computed yet. Create this
        # whether or not the caching is enabled or disabled.
        self._move_cache: Dict[PieceColor, Union[List[Move], None]] = {
            PieceColor.BLACK: None,
            PieceColor.RED: None
        }

        self._game_state = GameStatus.IN_PROGRESS  # the game state

        self._moves_since_capture = 0  # number of moves since a capture
        self._max_moves_since_capture = self._calc_draw_timeout(
            rows_per_player)

    def get_captured_pieces(self) -> List[Piece]:
        """
        Getter method that returns a list of all captured pieces.

        Overrides parent function definition since we know that in checkers
        there are only two defined colors.

        Args:
            None

        Returns:
            List[Piece]: list of all captured pieces
        """
        raise NotImplementedError

    def complete_move(self, move: Move,
                      draw_offer: Union[DrawOffer, None] = None) -> List[Move]:
        """
        Complete a move with a piece.

        If the move is not valid, a ValueError is raised. This includes when
        a non-jumping move is attempted when a jump is available. Any provided
        draw offers processed just before the error is raised will be undone.

        Returns a list of possible subsequent jumps, if necessary, that follow
        the provided move. If this list is empty, the player's turn is over.

        If a move results in kinging, the player's turn is over and nothing
        is returned.

        If a resignation is provided, the player's turn is over
        and nothing is returned.

        To offer a draw, a regular move (move/jump) must be provided along with
        a DrawOffer.

        To accept the draw offer, play the draw offer in both `move` and in
        `draw_offer`.

        Args:
            move (Move): move to make
            draw_offer (DrawOffer): optional argument for draw offers

        Returns:
            List[Jump]: list of subsequent jumps for current piece, if any

        Raises:
            ValueError: If the move is not valid
        """
        raise NotImplementedError

    def undo_move(self, move: Move) -> None:
        """
        Undo a provided move (Move or Jump). Implemented for the bot, may not
        work when not used by the bot.

        Args:
            move (Move): the move that is to be undone

        Returns:
            None

        Raises:
            TypeError: if move is a DrawOffer or Resignation
        """
        raise NotImplementedError

    def get_piece_moves(self, piece: Piece,
                        jumps_only: bool = False) -> List[Move]:
        """
        Returns a list of possible moves (moves and jumps) for a piece. If
        jump(s) are possible, then only jumps will be returned

        Args:
            piece (Piece): the piece being queried
            jumps_only (bool): only jumps or an empty list will be returned

        Returns:
            List[Move]: the list of moves (move(s) XOR jump(s)) for that piece
        """
        raise NotImplementedError

    def get_player_moves(self, color: PieceColor) -> List[Move]:
        """
        Returns a list of possible moves for a player's pieces. If this list is
        empty, the player is unable to make a move (and has lost the game).

        If there are any jumps possible, only jumps will be returned.

        If there is a draw offer from the other player, a DrawOffer "move"
        will be included.

        This function sets the player move/jump availability cache.

        Args:
            color (PieceColor): the player being queried

        Returns:
            List[Move]: list of possible moves:
                        ((moves XOR jumps) OR DrawOffer)
        """
        raise NotImplementedError

    def validate_move(self, move: Move) -> bool:
        """
        Validates a potential move. If only moves provided by this class are
        attempted, then this function should never return False.

        Args:
            move (Move): the move to be validated

        Returns:
            bool: True if the move is valid, otherwise False
        """
        raise NotImplementedError

    def get_game_state(self) -> GameStatus:
        """
        Returns the current game state. Checks for winning conditions before
        returning.

        Should be called before every player's turn.

        Args:
            None

        Returns:
            GameStatus: the game state
        """
        raise NotImplementedError

    def _handle_draw_offer(self, offer: DrawOffer) -> PieceColor:
        """
        Private method to handle draw offers. Intended to be called by
        complete_move().

        Args:
            offer (DrawOffer): the draw offer

        Returns:
            PieceColor: the color of the player offering/accepting the draw

        Raises:
            ValueError: if the offering color is invalid
            RuntimeError: if the offering color already has a pending offer
        """
        raise NotImplementedError

    def _reset_draw_offers(self) -> None:
        """
        Private method for resetting draw offers.

        Args:
            None

        Returns:
            None
        """
        raise NotImplementedError

    def _calc_draw_timeout(self, rows_per_player: int,
                           _enabled: bool = True) -> int:
        """
        Private method for calculating the maximum number of moves between
        captures before a stalemate. Roughly set to slightly over the average
        number of moves between captures in a game.

        Datapoints collected by Junfei. Power function values calculated by
        Dylan.

        Args:
            rows_per_player (int): the number of rows per player
            _enabled (bool): Uses calculation if true, otherwise returns 40

        Returns:
            int: number of moves between captures before stalemate
        """
        raise NotImplementedError

    def _gen_pieces(self, height: Union[int, None] = None,
                    width: Union[int, None] = None) -> Dict[Position, Piece]:
        """
        Private method for generating all pieces before the game begins.

        Overrides the parent `_gen_pieces()` and thus keeps the same method
        signature.

        Args:
            height (int or None): the number of rows per player
            width (int or None): Unused argument for CheckersBoard

        Returns:
            Dict[Position, Piece]: Dictionary containing piece locations and
                                   pieces for both players

        Raises:
            ValueError: if parameter height is None
        """
        raise NotImplementedError

    def _can_player_move(self, color: PieceColor) -> bool:
        """
        Private method for getting whether the player has any valid move. Does
        not consider DrawOffer as a possible move.

        This private method is not used, as we currently interpret having a
        DrawOffer as being a valid move.

        Args:
            color (PieceColor): the color of the player being queried

        Returns:
            bool: True if the player has a move available otherwise False
        """
        raise NotImplementedError
